<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rune Nielsen | Freelance Software Developer</title>
    <link>https://runenielsen.com/</link>
    <description>Recent content on Rune Nielsen | Freelance Software Developer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Jul 2016 16:26:19 +0200</lastBuildDate>
    
	<atom:link href="https://runenielsen.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating APIs in ASP.NET MVC</title>
      <link>https://runenielsen.com/posts/creating_apis_in_asp_net_mvc/</link>
      <pubDate>Sun, 10 Jul 2016 16:26:19 +0200</pubDate>
      
      <guid>https://runenielsen.com/posts/creating_apis_in_asp_net_mvc/</guid>
      <description>Creating API&amp;rsquo;s in ASP.NET MVC In a modern day web application, we want to use APIs for creating responsive web applications. This is done by using async calls to the APIs and therefore reduce the number of postbacks to the server, making a better user experience and reducing the load on the web server.
An example of using this principle is SPAs (Single Page Application). The principle behind SPAs is that all rendering is done on the client-side, so instead of the server being responsible for rendering, the clients browser is now responsible for that task.</description>
    </item>
    
    <item>
      <title>View Models in ASP.NET MVC</title>
      <link>https://runenielsen.com/posts/view_models_in_asp_net_mvc/</link>
      <pubDate>Sun, 03 Jul 2016 16:26:19 +0200</pubDate>
      
      <guid>https://runenielsen.com/posts/view_models_in_asp_net_mvc/</guid>
      <description>View Models in ASP.NET MVC In ASP.NET MVC best practice is to use view models. A view model in ASP.NET MVC is a simple class only containing the data, that you want to display on your view. A view model can contain all from static text to input values like an assortment of countries for a drop-down menu.
Letâ€™s say that we have an Employee class and it contains the following properties.</description>
    </item>
    
    <item>
      <title>Inversion of Control Container</title>
      <link>https://runenielsen.com/posts/inversion_of_control_container/</link>
      <pubDate>Sun, 26 Jun 2016 16:26:19 +0200</pubDate>
      
      <guid>https://runenielsen.com/posts/inversion_of_control_container/</guid>
      <description>Inversion of Control Container To get straight to the facts, we use an IoC container because it help us to decouple our classes and make our life easier when it comes to unit testing. An IoC container is in most cases a framework that will help you manage your classes/objects, this includes creation, destruction, managing the lifetime of the objects and dependencies.
So the basic idea behind inversion of control is that, instead of making your application tightly coupled by letting your classes new up their dependencies, you instead pass in dependencies during class construction and the IoC container framework will take care of the creation of the object and not the classes themselves.</description>
    </item>
    
    <item>
      <title>AutoMapper The Basics</title>
      <link>https://runenielsen.com/posts/automapper_the_basics/</link>
      <pubDate>Mon, 06 Jun 2016 16:26:19 +0200</pubDate>
      
      <guid>https://runenielsen.com/posts/automapper_the_basics/</guid>
      <description>AutoMapper AutoMapper is a library for the .NET platform, which has the task of mapping an object to another. The usefulness comes when working with views or APIs where data must be presented or sent. In the provided cases, one uses view models for view rendering, or data transfer objects when working with APIs.
The usefulness of a mapping framework lies in that you without it would end up with many manual mappings.</description>
    </item>
    
  </channel>
</rss>